/*
 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 \ Empresa.: Ind£stria de Urnas Bignotto Ltda
 \ Programa: ADP_R044.PRG
 \ Data....: 19-01-97
 \ Sistema.: Administradora - PLANO
 \ Funcao..: Impress„o VIP
 \ Analista: Ademilson Pedro Bom
 \ Criacao.: GAS-Pro v3.0 
 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
*/

#include "adpbig.ch"    // inicializa constantes manifestas

LOCAL dele_atu, getlist:={}
PARA  lin_menu, col_menu
PRIV  tem_borda:=.t., op_menu:=VAR_COMPL, l_s:=11, c_s:=20, l_i:=16, c_i:=61, tela_fundo:=SAVESCREEN(0,0,MAXROW(),79)
nucop=1
SETCOLOR(drvtittel)
vr_memo=NOVAPOSI(@l_s,@c_s,@l_i,@c_i)     // pega posicao atual da tela
CAIXA(mold,l_s,c_s,l_i,c_i)               // monta caixa da tela
@ l_s,c_s+9 SAY " GRUPOS C/TAXAS A EMITIR "
SETCOLOR(drvcortel)
@ l_s+01,c_s+1 SAY " Emiss„o:"
@ l_s+02,c_s+1 SAY " Grupo..:      De:       -"
@ l_s+03,c_s+1 SAY " £ltima Circular.:"
@ l_s+04,c_s+1 SAY " Pr¢xima Circular:        Confirme:"
remissao_=CTOD('')                                 // Emiss„o
rgrupo=SPAC(2)                                     // Grupo
rproxcirc=SPAC(3)                                  // N§Proxima Circ.
confirme=SPAC(1)                                   // Confirme
DO WHILE .t.
 rola_t=.f.
 cod_sos=56
 SET KEY K_ALT_F8 TO ROLATELA
 SETCOLOR(drvcortel+","+drvcorget+",,,"+corcampo)
 @ l_s+01 ,c_s+11 GET  remissao_;
                  PICT "@D";
                  VALI CRIT("!EMPT(Remissao_)~Informe uma data v lida p/ EMISSŽO | data de hoje ou posterior.")
                  DEFAULT "CTOD('05'+SUBSTR(DTOC(DATE()+30),3))"
                  AJUDA "Data da Emiss„o da Circular.| Para atualizar circulares se n„o preenchidas| com antecedˆncia."

 @ l_s+02 ,c_s+11 GET  rgrupo;
                  PICT "!9";
		  VALI CRIT("PTAB(rgrupo,'ARQGRUP',1)~GRUPO n„o existe na tabela")
                  DEFAULT "M->mgrupvip"
                  AJUDA "Entre com o grupo ou |tecle F8 para consulta em tabela"
                  CMDF8 "VDBF(6,33,20,77,'ARQGRUP',{'grup','inicio','final','ultcirc','emissao_','procpend'},1,'grup',[])"
                  MOSTRA {"LEFT(TRAN(ARQGRUP->inicio,[999999]),06)", 2 , 20 }
                  MOSTRA {"LEFT(TRAN(ARQGRUP->final,[999999]),06)", 2 , 27 }
                  MOSTRA {"LEFT(TRAN(ARQGRUP->ultcirc,[999]),03)", 3 , 20 }
                  MOSTRA {"LEFT(TRAN(ARQGRUP->emissao_,[@D]),08)", 3 , 24 }

 @ l_s+04 ,c_s+20 GET  rproxcirc;
                  PICT "999";
                  VALI CRIT("rproxcirc>=ARQGRUP->ultcirc~A Pr¢xima circular deve ser maior|ou igual a £ltima emitida")
                  AJUDA "Entre com o n£mero da pr¢xima circular"
                  CMDF8 "STRZERO(VAL(ARQGRUP->ultcirc)+1,3)"

 @ l_s+04 ,c_s+37 GET  confirme;
                  PICT "!";
                  VALI CRIT("confirme='S'.AND.V03001F9()~CONFIRME n„o aceit vel")
                  AJUDA "Digite S para confirmar|ou|tecle ESC para cancelar"

 READ
 SET KEY K_ALT_F8 TO
 IF rola_t
  ROLATELA(.f.)
  LOOP
 ENDI
 IF LASTKEY()=K_ESC                                // se quer cancelar
  RETU                                             // retorna
 ENDI

 #ifdef COM_REDE
  IF !USEARQ("TAXAS",.t.,10,1)                     // se falhou a abertura do arq
   RETU                                            // volta ao menu anterior
  ENDI
 #else
  USEARQ("TAXAS")                                  // abre o dbf e seus indices
 #endi

 PTAB(M->mgrupvip,'ARQGRUP',1)
 PTAB(codigo,"GRUPOS",1,.t.)                       // abre arquivo p/ o relacionamento
 PTAB(GRUPOS->tipcont,"CLASSES",1,.t.)
 PTAB(cobrador,"COBRADOR",1,.t.)
 PTAB(M->mgrupvip+ARQGRUP->proxcirc,"CIRCULAR",1,.t.)
 PTAB(codigo+circ,"MENSAG",1,.t.)
 PTAB(codigo+[3]+circ,"CSTSEG",3,.t.)
 SET RELA TO codigo INTO GRUPOS,;                  // relacionamento dos arquivos
	  TO GRUPOS->tipcont INTO CLASSES,;
	  TO cobrador INTO COBRADOR,;
	  TO M->mgrupvip+ARQGRUP->proxcirc INTO CIRCULAR,;
	  TO codigo+circ INTO MENSAG,;
	  TO codigo+tipo+circ INTO CSTSEG
 titrel:=criterio:=cpord := ""                     // inicializa variaveis
 titrel:=chv_rela:=chv_1:=chv_2 := ""
 tps:=op_x:=ccop := 1
 IF !opcoes_rel(lin_menu,col_menu,31,11)           // nao quis configurar...
  CLOS ALL                                         // fecha arquivos e
  LOOP                                             // volta ao menu
 ENDI
 IF tps=2                                          // se vai para arquivo/video
  arq_=ARQGER()                                    // entao pega nome do arquivo
  IF EMPTY(arq_)                                   // se cancelou ou nao informou
   LOOP                                            // retorna
  ENDI
 ELSE
  arq_=drvporta                                    // porta de saida configurada
 ENDI
 SET PRINTER TO (arq_)                             // redireciona saida
 EXIT
ENDD
IF !EMPTY(drvtapg)                                 // existe configuracao de tam pag?
 op_=AT("NNN",drvtapg)                             // se o codigo que altera
 IF op_=0                                          // o tamanho da pagina
  msg="Configura‡„o do tamanho da p gina!"         // foi informado errado
  DBOX(msg,,,,,"ERRO!")                            // avisa
  CLOSE ALL                                        // fecha todos arquivos abertos
  RETU                                             // e cai fora...
 ENDI                                              // codigo para setar/resetar tam pag
 lpp_026=LEFT(drvtapg,op_-1)+"026"+SUBS(drvtapg,op_+3)
 lpp_066=LEFT(drvtapg,op_-1)+"066"+SUBS(drvtapg,op_+3)
ELSE
 lpp_026:=lpp_066 :=""                             // nao ira mudara o tamanho da pag
ENDI
DBOX("[ESC] Interrompe",15,,,NAO_APAGA)
dele_atu:=SET(_SET_DELETED,.t.)                    // os excluidos nao servem...
SET DEVI TO PRIN                                   // inicia a impressao
maxli=24                                           // maximo de linhas no relatorio
IMPCTL(lpp_026)                                    // seta pagina com 26 linhas
SET MARG TO 1                                      // ajusta a margem esquerda
IF tps=2
 IMPCTL("' '+CHR(8)")
ENDI
BEGIN SEQUENCE
 DO WHIL ccop<=nucop                               // imprime qde copias pedida
  pg_=1; cl=999
  INI_ARQ()                                        // acha 1o. reg valido do arquivo
  ccop++                                           // incrementa contador de copias
  DO WHIL !EOF()
   #ifdef COM_TUTOR
    IF IN_KEY()=K_ESC                              // se quer cancelar
   #else
    IF INKEY()=K_ESC                               // se quer cancelar
   #endi
    IF canc()                                      // pede confirmacao
     BREAK                                         // confirmou...
    ENDI
   ENDI
   IF emissao_=CIRCULAR->emissao_.AND.CLASSES->prior=[S].AND.valorpg=0.AND.!(tipo$'16')// se atender a condicao...
    REL_CAB(1)                                     // soma cl/imprime cabecalho
    @ cl,015 SAY "Manut.:"
//    valororig=IIF(!CSTSEG->(EOF()),CSTSEG->vlorig,valor)// variavel temporaria
    valororig=IIF(PTAB(codigo+[3]+circ,'CSTSEG',3),CSTSEG->vlorig,valor)// variavel temporaria

    @ cl,023 SAY TRAN(valororig,"@E 999,999.99")   // Valor Contribuicao
    @ cl,062 SAY "Manut.:"
    @ cl,069 SAY TRAN(valororig,"@E 999,999.99")   // Valor Contribuicao
//    @ cl,069 SAY TRAN(IIF(!CSTSEG->(EOF()),CSTSEG->vlorig,valor),"@E 999,999.99")// Valor Contribuicao 2
    REL_CAB(1)                                     // soma cl/imprime cabecalho
    @ cl,015 SAY "Seguro:"
    @ cl,023 SAY TRAN(valor-valororig,"@E 999,999.99")// Valor Seguro
    @ cl,062 SAY "Seguro:"
    @ cl,069 SAY TRAN(valor-valororig,"@E 999,999.99")// Valor Seguro 2
    REL_CAB(1)                                     // soma cl/imprime cabecalho
    @ cl,015 SAY "TOTAL.:"
    @ cl,023 SAY TRAN(valor,"@E 999,999.99")       // Valor Total
    @ cl,062 SAY "TOTAL.:"
    @ cl,069 SAY TRAN(valor,"@E 999,999.99")       // Valor Total 2
    REL_CAB(3)                                     // soma cl/imprime cabecalho
    IMPEXP(cl,000,GRUPOS->codigo,12)               // Codigo
    IMPCTL(drvpenf)
    @ cl,024 SAY [/]+tipo+[/]+circ+[ ]             // compl.codigo 2
    IMPCTL(drvtenf)
    IMPEXP(cl,039,GRUPOS->codigo,12)               // Codigo 2
    IMPCTL(drvpenf)
    @ cl,062 SAY [/]+tipo+[/]+circ+[ ]             // compl.codigo 1
    IMPCTL(drvtenf)
    REL_CAB(1)                                     // soma cl/imprime cabecalho
    @ cl,000 SAY "Emiss:"
    @ cl,007 SAY TRAN(emissao_,"@D")               // Emissao
    @ cl,020 SAY "Admiss:"
    @ cl,027 SAY TRAN(GRUPOS->admissao,"@D")       // Admiss„o
    @ cl,039 SAY "Emiss:"
    @ cl,046 SAY TRAN(emissao_,"@D")               // Emissao 2
    @ cl,059 SAY "Admiss:"
    @ cl,066 SAY TRAN(GRUPOS->admissao,"@D")       // Admiss„o 2
    REL_CAB(1)                                     // soma cl/imprime cabecalho
    @ cl,000 SAY "Cobrador..:"
    @ cl,011 SAY COBRADOR->cobrador+[ ]+LEFT(COBRADOR->nome,15)// Cobrador
    @ cl,039 SAY "Cobrador..:"
    @ cl,050 SAY COBRADOR->cobrador+[ ]+LEFT(COBRADOR->nome,15)// Cobrador 2
    REL_CAB(1)                                     // soma cl/imprime cabecalho
    @ cl,000 SAY ALLTRIM(CLASSES->descricao)+[ ]+IIF(GRUPOS->formapgto<[05],SUBSTR(tbfpgto,(VAL(GRUPOS->formapgto)-1)*13+1,13),GRUPOS->formapgto)// definicao 1
    @ cl,039 SAY ALLTRIM(CLASSES->descricao)+[ ]+IIF(GRUPOS->formapgto<[05],SUBSTR(tbfpgto,(VAL(GRUPOS->formapgto)-1)*13+1,13),GRUPOS->formapgto)// definicao 2
    REL_CAB(2)                                     // soma cl/imprime cabecalho
    @ cl,000 SAY GRUPOS->nome                      // Nome
    @ cl,039 SAY GRUPOS->nome                      // Nome 2
    REL_CAB(1)                                     // soma cl/imprime cabecalho
    @ cl,000 SAY GRUPOS->endereco                  // Endere‡o
    @ cl,039 SAY GRUPOS->endereco                  // Endere‡o 2
    REL_CAB(1)                                     // soma cl/imprime cabecalho
    @ cl,000 SAY GRUPOS->bairro                    // Bairro
    @ cl,039 SAY GRUPOS->bairro                    // Bairro 2
    REL_CAB(1)                                     // soma cl/imprime cabecalho
    @ cl,000 SAY GRUPOS->cep+[ ]+ALLTRIM(GRUPOS->cidade)+[, ]+GRUPOS->uf// Cidade
    @ cl,039 SAY GRUPOS->cep+[ ]+ALLTRIM(GRUPOS->cidade)+[, ]+GRUPOS->uf// Cidade 2
    REL_CAB(2)                                     // soma cl/imprime cabecalho
    @ cl,039 SAY chr(15)+MENSAG->mens1+chr(18)     // Mens1
    REL_CAB(1)                                     // soma cl/imprime cabecalho
    @ cl,039 SAY chr(15)+MENSAG->mens2+chr(18)     // Mens2
    IF M->combarra=[S]
     CODBARRAS({{codigo+tipo+circ,1,13,19}},10,6)
    ENDI
    REL_CAB(1)                                     // soma cl/imprime cabecalho
    @ cl,039 SAY chr(15)+IIF(EMPT(MENSAG->mens3),CIRCULAR->menscirc,MENSAG->mens3)+chr(18)// Mens 3
    IF M->combarra=[S]
     CODBARRAS({{codigo+tipo+circ,1,13,19}},10,6)
    ENDI
    SKIP                                           // pega proximo registro
    cl=999                                         // forca salto de pagina
   ELSE                                            // se nao atende condicao
    SKIP                                           // pega proximo registro
   ENDI
  ENDD
 ENDD ccop
 EJEC                                              // salta pagina
END SEQUENCE
SET MARG TO                                        // coloca margem esquerda = 0
IMPCTL(lpp_066)                                    // seta pagina com 66 linhas
SET PRINTER TO (drvporta)                          // fecha arquivo gerado (se houver)
SET DEVI TO SCRE                                   // direciona saida p/ video
IF tps=2                                           // se vai para arquivo/video
 BROWSE_REL(arq_,2,3,MAXROW()-2,78)
ENDI                                               // mostra o arquivo gravado
GRELA(31)                                          // grava variacao do relatorio
msgt="PROCESSAMENTOS DO RELAT¢RIO|IMPRESSŽO VIP"
ALERTA()
op_=DBOX("Prosseguir|Cancelar opera‡„o",,,E_MENU,,msgt)
IF op_=1
 DBOX("Processando registros",,,,NAO_APAGA,"AGUARDE!")
 dele_atu:=SET(_SET_DELETED,.t.)                   // os excluidos nao servem...
 SELE TAXAS                                        // processamentos apos emissao
 INI_ARQ()                                         // acha 1o. reg valido do arquivo
 DO WHIL !EOF()
  IF emissao_=CIRCULAR->emissao_.AND.CLASSES->prior=[S].AND.valorpg=0.AND.!(tipo$'16')// se atender a condicao...

   #ifdef COM_REDE
    IF stat < [2]
     REPBLO('TAXAS->stat',{||[2]})
    ENDI
   #else
    IF stat < [2]
     REPL TAXAS->stat WITH [2]
    ENDI
   #endi

   SKIP                                            // pega proximo registro
  ELSE                                             // se nao atende condicao
   SKIP                                            // pega proximo registro
  ENDI
 ENDD
 ALERTA(2)
 DBOX("Processo terminado com sucesso!",,,,,msgt)
ENDI
SELE TAXAS                                         // salta pagina
SET RELA TO                                        // retira os relacionamentos
SET(_SET_DELETED,dele_atu)                         // os excluidos serao vistos
RETU

STATIC PROC REL_CAB(qt)                            // cabecalho do relatorio
IF qt>0                                            // se parametro maior que 0
 cl=cl+qt                                          // soma no contador de linhas
ENDI
IF cl>maxli .OR. qt=0                              // quebra de pagina
 cl=qt+1 ; pg_++
ENDI
RETU

* \\ Final de ADP_R044.PRG
